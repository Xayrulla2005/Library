openapi: 3.0.0
info:
  title: Library API
  version: 1.0.0
  description: API for managing users, authors, books, audiobooks, PDFs, uploads, and profiles

servers:
  - url: http://localhost:4001
    description: Local server

paths:
  # ================= AUTH =================
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: JohnDoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: mypassword123
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Email already registered

  /api/auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: mypassword123
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid email or password

  /api/auth/add-admin:
    post:
      summary: Add a new admin (Admin only)
      tags:
        - Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: AdminUser
                email:
                  type: string
                  example: admin@example.com
                password:
                  type: string
                  example: adminpassword123
      responses:
        '201':
          description: Admin added successfully
        '400':
          description: Email already registered
        '401':
          description: Unauthorized

  # ================= AUTHORS =================
  /api/authors:
    get:
      summary: Get all authors
      tags:
        - Authors
      responses:
        '200':
          description: List of authors
    post:
      summary: Add a new author (Admin only)
      tags:
        - Authors
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                age:
                  type: integer
                  example: 45
      responses:
        '201':
          description: Author created
        '401':
          description: Unauthorized

  # ================= BOOKS =================
  /api/books:
    get:
      summary: Get all books
      tags:
        - Books
      responses:
        '200':
          description: List of books
    post:
      summary: Add a new book (Admin only)
      tags:
        - Books
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Book Title
                author:
                  type: string
                  example: 64f30683f65b182023c8xxxx
                description:
                  type: string
                  example: Book description
      responses:
        '201':
          description: Book created
        '401':
          description: Unauthorized

  # ================= AUDIOBOOKS =================
  /api/audiobooks:
    get:
      summary: Get all audiobooks
      tags:
        - AudioBooks
      responses:
        '200':
          description: List of audiobooks
    post:
      summary: Add a new audiobook (Admin only)
      tags:
        - AudioBooks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - author
                - audioUrl
              properties:
                title:
                  type: string
                author:
                  type: string
                audioUrl:
                  type: string
                duration:
                  type: string
      responses:
        '201':
          description: Audio book added
    delete:
      summary: Delete an audiobook (Admin only)
      tags:
        - AudioBooks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Audio book deleted

  # ================= PDF BOOKS =================
  /api/pdfbooks:
    get:
      summary: Get all PDF books
      tags:
        - PDFBooks
      responses:
        '200':
          description: List of PDF books
    post:
      summary: Add a PDF book (Admin only)
      tags:
        - PDFBooks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - author
                - pdfUrl
              properties:
                title:
                  type: string
                author:
                  type: string
                pdfUrl:
                  type: string
      responses:
        '201':
          description: PDF book added
    delete:
      summary: Delete a PDF book (Admin only)
      tags:
        - PDFBooks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: PDF book deleted

  # ================= LIBRARY BOOKS =================
  /api/librarybooks:
    get:
      summary: Get all library books
      tags:
        - LibraryBooks
      responses:
        '200':
          description: List of library books
    post:
      summary: Add a library book (Admin only)
      tags:
        - LibraryBooks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - author
                - availableCopies
              properties:
                title:
                  type: string
                author:
                  type: string
                availableCopies:
                  type: integer
      responses:
        '201':
          description: Library book added
    delete:
      summary: Delete a library book (Admin only)
      tags:
        - LibraryBooks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Library book deleted

  # ================= FORGOT PASSWORD =================
  /api/password/forgot-password:
    post:
      summary: Send OTP to reset password
      tags:
        - ForgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: OTP sent

  /api/password/verify-otp:
    post:
      summary: Verify OTP and reset password
      tags:
        - ForgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - newPassword
              properties:
                email:
                  type: string
                otp:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successfully

  # ================= PROFILE =================
  /api/profile:
    get:
      summary: Get user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
    put:
      summary: Update user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: Profile updated

  /api/profile/change-password:
    put:
      summary: Change password
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed

  # ================= TOKEN =================
  /api/token/refresh:
    post:
      summary: Refresh access token
      tags:
        - Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed

  /api/token/logout:
    post:
      summary: Logout user
      tags:
        - Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Logged out successfully

  # ================= UPLOAD =================
  /api/upload:
    post:
      summary: Upload file
      tags:
        - Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
